#if UNITY_IOS || UNITY_IPHONE
using System;
using System.Globalization;
using System.IO;
using System.Text;
using UnityEditor.iOS.Xcode;
using UnityEditor.Localization.Platform.Utility;
using UnityEngine.Localization;
using UnityEngine.Localization.Metadata;
using UnityEngine.Localization.Platform.iOS;
using UnityEngine.Localization.Settings;
using UnityEngine.Localization.Tables;
using Debug = UnityEngine.Debug;

namespace UnityEditor.Localization.Platform.iOS
{
    public static class Player
    {
        const string kInfoFile = "InfoPlist.strings";

        static PackageManager.PackageInfo s_PackageInfo;
        static PackageManager.PackageInfo LocalizationPackageInfo
        {
            get
            {
                if (s_PackageInfo == null)
                {
                    s_PackageInfo = PackageManager.PackageInfo.FindForAssembly(typeof(LocalizationSettings).Assembly);
                }
                return s_PackageInfo;
            }
        }

        /// <summary>
        /// Updates the Xcode project file with localized values using the <see cref="AppInfo"/> from <see cref="LocalizationSettings.Metadata"/>.
        /// </summary>
        /// <param name="projectDirectory">The root project directory to be updated. This is where the iOS player was built to.</param>
        /// <param name="appInfo"></param>
        public static void AddLocalizationToXcodeProject(string projectDirectory)
        {
            var appInfo = LocalizationSettings.Metadata.GetMetadata<AppInfo>();
            if (appInfo == null)
                return;
            AddLocalizationToXcodeProject(projectDirectory, appInfo);
        }

        /// <summary>
        /// Updates the Xcode project file with localized values using <see cref="AppInfo"/>.
        /// </summary>
        /// <param name="projectDirectory">The root project directory to be updated. This is where the iOS player was built to.</param>
        /// <param name="appInfo">Contains the localized values for the App.</param>
        public static void AddLocalizationToXcodeProject(string projectDirectory, AppInfo appInfo)
        {
            if (appInfo == null)
                throw new ArgumentNullException(nameof(appInfo));

            var pbxPath = PBXProject.GetPBXProjectPath(projectDirectory);
            var project = new PBXProject();
            project.ReadFromFile(pbxPath);
            project.ClearKnownRegions(); // Remove the deprecated regions that get added automatically.

            var plistDocument = new PlistDocument();
            var plistPath = Path.Combine(projectDirectory, "Info.plist");
            plistDocument.ReadFromFile(plistPath);

            var bundleLanguages = plistDocument.root.CreateArray("CFBundleLocalizations");

            foreach (var locale in LocalizationEditorSettings.GetLocales())
            {
                var code = locale.Identifier.Code.Replace("-", "_");
                project.AddKnownRegion(code);
                bundleLanguages.AddString(code);

                var localeDir = code + ".lproj";
                var dir = Path.Combine(projectDirectory, localeDir);
                Directory.CreateDirectory(dir);

                var filePath = Path.Combine(dir, kInfoFile);
                var relativePath = Path.Combine(localeDir, kInfoFile);

                GenerateLocalizedInfoPlistFile(locale, appInfo, plistDocument, filePath);
                project.AddLocaleVariantFile(kInfoFile, code, relativePath);
            }

            plistDocument.WriteToFile(plistPath);
            project.WriteToFile(pbxPath);
        }

        static void GenerateLocalizedInfoPlistFile(Locale locale, AppInfo appInfo, PlistDocument plistDocument, string filePath)
        {
            using (var stream = new StreamWriter(filePath, false, Encoding.UTF8))
            {
                stream.Write(
                    "/*\n" +
                    $"\t{kInfoFile}\n" +
                    $"\tThis file was auto-generated by {LocalizationPackageInfo.name}\n" +
                    $"\tVersion {LocalizationPackageInfo.version}\n" +
                    $"\tChanges to this file may cause incorrect behavior and will be lost if the project is rebuilt.\n" +
                    $"*/\n\n");

                WriteLocalizedValue("CFBundleName", stream, locale, appInfo.ShortName, plistDocument);
                WriteLocalizedValue("CFBundleDisplayName", stream, locale, appInfo.DisplayName, plistDocument);
                WriteLocalizedValue("NSCameraUsageDescription", stream, locale, appInfo.CameraUsageDescription, plistDocument);
                WriteLocalizedValue("NSMicrophoneUsageDescription", stream, locale, appInfo.MicrophoneUsageDescription, plistDocument);
                WriteLocalizedValue("NSLocationWhenInUseUsageDescription", stream, locale, appInfo.LocationUsageDescription, plistDocument);
            }
        }

        static void WriteLocalizedValue(string valueName, StreamWriter stream, Locale locale, LocalizedString localizedString, PlistDocument plistDocument)
        {
            if (localizedString.IsEmpty)
                return;

            var tableCollection = LocalizationEditorSettings.GetStringTableCollection(localizedString.TableReference);
            var table = tableCollection?.GetTable(locale.Identifier) as StringTable;
            var entry = table?.GetEntryFromReference(localizedString.TableEntryReference);

            if (entry == null || string.IsNullOrWhiteSpace(entry.LocalizedValue))
            {
                // Use fallback?
                var fallBack = FallbackLocaleHelper.GetLocaleFallback(locale);
                if (fallBack != null)
                {
                    WriteLocalizedValue(valueName, stream, fallBack, localizedString, plistDocument);
                    return;
                }

                Debug.LogWarning($"{valueName}: Could not find a localized value for {locale} from {localizedString}");
                return;
            }

            Debug.Assert(!entry.IsSmart, $"Localized App Values ({valueName}) do not support Smart Strings - {localizedString}");
            stream.WriteLine($"\"{valueName}\" = \"{entry.LocalizedValue}\";");

            plistDocument.root.SetString(valueName, string.Empty);
        }
    }
}
#endif
